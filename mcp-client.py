from mcp import tool
from mcp.server.fastmcp import FastMCP

@tool
async def generate_mock_data_from_files(
    instruction_path: str,
    layout_path: str,
    sample_path: str
) -> str:
    """
    Called by Copilot. Reads input files and returns a prompt for Copilot to generate 10 mock rows.
    """

    with open(instruction_path, "r") as f:
        instruction = f.read()

    with open(layout_path, "r") as f:
        layout = f.read()

    with open(sample_path, "r") as f:
        sample = f.read()

    # This is what Copilot sees
    return f"""
You are a mock data generator.

ðŸ“‹ Instruction:
{instruction.strip()}

ðŸ“‘ Layout (CSV Format):
{layout.strip()}

ðŸ“„ Sample Data:
{sample.strip()}

ðŸŽ¯ Task:
Generate **exactly 10 rows** of mock data based on layout and sample. 
- First row = column names.
- Output format = valid **CSV**
- No extra commentary or explanations. Just the CSV.

Example:
col1,col2
val1,val2
...
"""
# Start MCP server (for DevX agent in VS Code)
mcp = FastMCP("mock-data")
mcp.run(transport="stdio")


import asyncio
from mcp_client import generate_mock_data_from_files  # Autogenerated by DevX after first call

async def run():
    response = await generate_mock_data_from_files(
        instruction_path="input/instruction.txt",
        layout_path="input/layout.csv",
        sample_path="input/sample.dat"
    )

    # Save response to CSV
    with open("mock_output.csv", "w") as f:
        f.write(response)

    print("âœ… Mock data saved to mock_output.csv")

if __name__ == "__main__":
    asyncio.run(run())
